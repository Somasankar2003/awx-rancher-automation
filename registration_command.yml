- name: Get TRUE Custom Cluster Registration Command
  hosts: localhost
  gather_facts: false
  vars:
    rancher_url: "https://192.168.170.67"
    api_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "custom-cluster"

  tasks:
    - name: Fetch cluster details
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: cluster_list_response

    - name: Fail if cluster not found
      fail:
        msg: "Cluster named {{ cluster_name }} not found!"
      when: cluster_list_response.json.data | length == 0

    - name: Set cluster ID
      set_fact:
        cluster_id: "{{ cluster_list_response.json.data[0].id }}"

    - name: Debug cluster info
      debug:
        var: cluster_list_response.json.data[0]

    - name: Check if this is a custom cluster (imported type)
      set_fact:
        is_custom_cluster: "{{ cluster_list_response.json.data[0].type == 'cluster' }}"

    - name: Get the correct registration command based on cluster type
      block:
        - name: Get registration token for custom cluster
          uri:
            url: "{{ rancher_url }}/v3/clusterRegistrationTokens"
            method: POST
            headers:
              Authorization: "Bearer {{ api_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              clusterId: "{{ cluster_id }}"
            validate_certs: false
            status_code: 201
          register: token_response

        - name: Wait for token to be ready
          uri:
            url: "{{ rancher_url }}/v3/clusterRegistrationTokens/{{ token_response.json.id }}"
            method: GET
            headers:
              Authorization: "Bearer {{ api_token }}"
            validate_certs: false
            status_code: 200
          register: final_token
          until: final_token.json.command is defined or final_token.json.nodeCommand is defined
          retries: 10
          delay: 3

        - name: Debug token response
          debug:
            var: final_token.json

        - name: Set registration command based on available fields
          set_fact:
            registration_command: "{{ final_token.json.command | default(final_token.json.nodeCommand) }}"

      when: is_custom_cluster

    - name: Display TRUE CUSTOM CLUSTER registration instructions
      debug:
        msg:
          - "âœ… TRUE CUSTOM CLUSTER REGISTRATION COMMAND"
          - "==========================================="
          - "Cluster: {{ cluster_name }}"
          - "Cluster ID: {{ cluster_id }}"
          - "Cluster Type: {{ cluster_list_response.json.data[0].type }}"
          - ""
          - "ðŸ“‹ REGISTRATION COMMAND:"
          - "{{ registration_command }}"
          - ""
          - "ðŸš¨ IMPORTANT: This is for EXISTING KUBERNETES NODES"
          - ""
          - "ðŸ”§ PREREQUISITES:"
          - "1. Install Kubernetes (RKE2/K3s) manually on your nodes"
          - "2. Configure node roles in your Kubernetes installation"
          - "3. Ensure kubectl is configured and working"
          - "4. THEN run the registration command above"
          - ""
          - "ðŸ“– For RKE2 installation example:"
          - "   curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.27.5+rke2r1 sh -"
          - "   systemctl enable rke2-server.service"
          - "   systemctl start rke2-server.service"

    - name: Save TRUE custom cluster registration instructions
      copy:
        content: |
          TRUE CUSTOM CLUSTER REGISTRATION
          ================================

          Cluster: {{ cluster_name }}
          Cluster ID: {{ cluster_id }}
          Cluster Type: {{ cluster_list_response.json.data[0].type }}

          IMPORTANT: This cluster requires MANUAL Kubernetes installation first.

          PREREQUISITES:
          1. Install Kubernetes (RKE2 or K3s) manually on your nodes
          2. Configure appropriate node roles during installation
          3. Ensure Kubernetes is running and healthy

          REGISTRATION COMMAND:
          {{ registration_command }}

          INSTALLATION EXAMPLES:

          For RKE2 (Control Plane + etcd node):
          -------------------------------------
          curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.27.5+rke2r1 sh -
          mkdir -p /etc/rancher/rke2/
          cat > /etc/rancher/rke2/config.yaml << EOF
          token: my-shared-secret
          node-taint:
            - "CriticalAddonsOnly=true:NoExecute"
          node-label:
            - "node-role.kubernetes.io/control-plane=true"
            - "node-role.kubernetes.io/etcd=true"
          EOF
          systemctl enable rke2-server.service
          systemctl start rke2-server.service

          For RKE2 (Worker node):
          -----------------------
          curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.27.5+rke2r1 sh -
          mkdir -p /etc/rancher/rke2/
          cat > /etc/rancher/rke2/config.yaml << EOF
          token: my-shared-secret
          server: https://<control-plane-ip>:9345
          node-label:
            - "node-role.kubernetes.io/worker=true"
          EOF
          systemctl enable rke2-agent.service
          systemctl start rke2-agent.service

          For K3s:
          --------
          curl -sfL https://get.k3s.io | sh -
          # K3s automatically registers with embedded etcd and control plane

          AFTER KUBERNETES IS INSTALLED AND RUNNING:
          ------------------------------------------
          Run the registration command above to connect to Rancher.
        dest: "./true-custom-cluster-{{ cluster_name }}-instructions.txt"
        mode: '0644'
