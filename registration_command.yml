- name: Get Rancher cluster registration command with correct CA checksum
  hosts: localhost
  gather_facts: false

  vars:
    rancher_url: "https://192.168.170.67"
    api_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "custom-cluster"

  tasks:
    - name: Fetch cluster details
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: cluster_list_response

    - name: Fail if cluster not found
      fail:
        msg: "Cluster named {{ cluster_name }} not found!"
      when: cluster_list_response.json.data | length == 0

    - name: Set cluster ID
      set_fact:
        cluster_id: "{{ cluster_list_response.json.data[0].id }}"

    - name: Fetch registration tokens for this cluster
      uri:
        url: "{{ rancher_url }}/v3/clusterregistrationtokens?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: tokens_response

    - name: Fail if no registration tokens found
      fail:
        msg: "No registration tokens found for cluster {{ cluster_name }}!"
      when: tokens_response.json.data | length == 0

    - name: Set token fact
      set_fact:
        token: "{{ tokens_response.json.data[0].token }}"

    - name: Extract hostname from Rancher URL
      set_fact:
        rancher_host: "{{ rancher_url | regex_replace('^https://', '') | regex_replace(':.*$', '') }}"

    - name: Try to get CA checksum from server certificate (preferred)
      shell: |
        openssl s_client -connect {{ rancher_host }}:443 -servername {{ rancher_host }} -showcerts < /dev/null 2>/dev/null |
        awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/ { print }' |
        openssl x509 -outform PEM |
        openssl sha256 -r |
        cut -d' ' -f1
      register: ca_checksum_openssl
      changed_when: false
      ignore_errors: true

    - name: Fallback - get CA from Rancher settings API
      uri:
        url: "{{ rancher_url }}/v3/settings/cacerts"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: ca_cert_setting
      when: ca_checksum_openssl.stdout | length != 64
      ignore_errors: true

    - name: Calculate checksum from fallback CA cert (base64)
      shell: |
        echo "{{ ca_cert_setting.json.value | default('') }}" | base64 -d 2>/dev/null |
        openssl x509 -outform PEM |
        openssl sha256 -r |
        cut -d' ' -f1
      register: ca_checksum_fallback
      changed_when: false
      when: ca_cert_setting is defined and ca_cert_setting.json.value is defined and ca_checksum_openssl.stdout | length != 64
      ignore_errors: true

    - name: Set final CA checksum from available methods
      set_fact:
        ca_checksum: >-
          {{ (ca_checksum_openssl.stdout if ca_checksum_openssl.stdout | length == 64 else
              (ca_checksum_fallback.stdout if ca_checksum_fallback.stdout | length == 64 else '')) }}

    - name: Final fallback - use empty CA checksum
      set_fact:
        ca_checksum: ""
      when: ca_checksum | length != 64

    - name: Debug CA checksum result
      debug:
        msg: "‚úÖ Final CA Checksum used: {{ ca_checksum if ca_checksum else 'Not used (insecure mode)' }}"

    - name: Build final registration command
      set_fact:
        registration_cmd: >-
          curl --insecure -fL "{{ rancher_url }}/system-agent-install.sh" | sudo sh -s - 
          --server "{{ rancher_url }}"
          --label 'cattle.io/os=linux'
          --token "{{ token }}"
          {% if ca_checksum | length == 64 %}--ca-checksum "{{ ca_checksum }}" {% endif %}
          --etcd --controlplane --worker

    - name: Save registration command to file
      copy:
        content: |
          #!/bin/bash
          {{ registration_cmd }}
        dest: "./register-{{ cluster_name }}.sh"
        mode: '0755'

    - name: Show registration command
      debug:
        msg: "{{ registration_cmd }}"

    - name: Success message
      debug:
        msg: |
          ‚úÖ Registration script generated at: ./register-{{ cluster_name }}.sh
          üîë Token: {{ token }}
          üîê CA Checksum: {{ ca_checksum if ca_checksum else 'Not used (insecure mode)' }}

          ‚û§ Run this script on your node to join the Rancher cluster!
