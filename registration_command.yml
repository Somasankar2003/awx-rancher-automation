- name: Get Rancher cluster registration command
  hosts: localhost
  gather_facts: false
  vars:
    rancher_url: "https://192.168.170.67"
    api_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "custom-cluster"

  tasks:
    - name: Fetch cluster details
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: cluster_list_response

    - name: Fail if cluster not found
      fail:
        msg: "Cluster named {{ cluster_name }} not found!"
      when: cluster_list_response.json.data | length == 0

    - name: Set cluster ID
      set_fact:
        cluster_id: "{{ cluster_list_response.json.data[0].id }}"

    - name: Debug cluster info
      debug:
        msg:
          - "Cluster ID: {{ cluster_id }}"
          - "Cluster Name: {{ cluster_list_response.json.data[0].name }}"
          - "Cluster State: {{ cluster_list_response.json.data[0].state }}"

    - name: Create new registration token
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens"
        method: POST
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          clusterId: "{{ cluster_id }}"
        validate_certs: false
        status_code: 201
      register: token_response

    - name: Debug token creation response
      debug:
        msg:
          - "Token ID: {{ token_response.json.id }}"
          - "Token created successfully"

    - name: Wait for token to be ready with full output
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens/{{ token_response.json.id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
        status_code: 200
      register: final_token
      until: final_token.json.insecureNodeCommand is defined
      retries: 15
      delay: 5

    - name: Display ALL available fields in token response
      debug:
        var: final_token.json

    - name: Extract and clean the insecureNodeCommand
      set_fact:
        registration_cmd: "{{ final_token.json.insecureNodeCommand | trim | replace('  ', ' ') }}"

    - name: Extract available fields safely
      set_fact:
        manual_token: "{{ final_token.json.token }}"
        # Try different possible field names for CA checksum
        manual_ca_checksum: "{{ final_token.json.clusterCaChecksum | default(final_token.json.caChecksum | default(final_token.json.caChecksum | default('UNKNOWN'))) }}"

    - name: Debug extracted fields
      debug:
        msg:
          - "Token: {{ manual_token }}"
          - "CA Checksum: {{ manual_ca_checksum }}"
          - "Available keys: {{ final_token.json.keys() | list }}"

    - name: Use the Rancher-generated command (most reliable)
      set_fact:
        final_registration_cmd: "{{ registration_cmd }}"

    - name: Create registration script file
      copy:
        content: |
          #!/bin/bash
          # Registration script for cluster: {{ cluster_name }}
          # Generated automatically from Rancher API
          
          echo "Registering node with cluster: {{ cluster_name }}"
          echo "Cluster ID: {{ cluster_id }}"
          echo ""
          
          {{ final_registration_cmd }}
          
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo ""
            echo "‚úÖ Node registration completed successfully!"
          else
            echo ""
            echo "‚ùå Node registration failed with exit code: $exit_code"
          fi
        dest: "./register-{{ cluster_name }}.sh"
        mode: '0755'

    - name: Create one-line command file
      copy:
        content: "{{ final_registration_cmd }}"
        dest: "./register-{{ cluster_name }}-oneline.sh"
        mode: '0755'

    - name: Display success message with full command
      debug:
        msg: |
          ‚úÖ REGISTRATION COMMAND GENERATED SUCCESSFULLY!
          ==============================================
          
          üìã CLUSTER INFORMATION:
          - Cluster Name: {{ cluster_name }}
          - Cluster ID: {{ cluster_id }}
          - Token: {{ manual_token }}
          - CA Checksum: {{ manual_ca_checksum }}
          
          üìÅ FILES CREATED:
          1. ./register-{{ cluster_name }}.sh - Full script with comments
          2. ./register-{{ cluster_name }}-oneline.sh - One-line command
          
          üîß REGISTRATION COMMAND:
          {{ final_registration_cmd }}
          
          üìñ USAGE INSTRUCTIONS:
          1. Make script executable: chmod +x register-{{ cluster_name }}.sh
          2. Run on each node: ./register-{{ cluster_name }}.sh
          3. Or use one-line: ./register-{{ cluster_name }}-oneline.sh
          4. Monitor progress in Rancher UI

    - name: Verify command matches expected format
      debug:
        msg: |
          ‚úÖ VERIFICATION PASSED!
          - Command starts with: {{ final_registration_cmd.startswith('curl --insecure -fL') }}
          - Contains server URL: {{ rancher_url in final_registration_cmd }}
          - Contains token: {{ manual_token in final_registration_cmd }}
          - Command length: {{ final_registration_cmd | length }} characters
