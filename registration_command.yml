- name: Get Rancher cluster registration command with auto CA checksum
  hosts: localhost
  gather_facts: false
  vars:
    rancher_url: "https://192.168.170.67"
    api_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "custom-cluster"

  tasks:
    - name: Fetch cluster details
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: cluster_list_response

    - name: Fail if cluster not found
      fail:
        msg: "Cluster named {{ cluster_name }} not found!"
      when: cluster_list_response.json.data | length == 0

    - name: Set cluster ID
      set_fact:
        cluster_id: "{{ cluster_list_response.json.data[0].id }}"

    - name: Fetch registration tokens for this cluster
      uri:
        url: "{{ rancher_url }}/v3/clusterregistrationtokens?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: tokens_response

    - name: Fail if no registration tokens found
      fail:
        msg: "No registration tokens found for cluster {{ cluster_name }}!"
      when: tokens_response.json.data | length == 0

    - name: Debug token response to see available fields
      debug:
        var: tokens_response.json.data[0]

    - name: Set token fact
      set_fact:
        token: "{{ tokens_response.json.data[0].token }}"

    - name: Try to get CA checksum from registration token using different field names
      set_fact:
        ca_checksum: "{{ tokens_response.json.data[0].caChecksum | default(tokens_response.json.data[0]['caChecksum'] | default(tokens_response.json.data[0]['ca-checksum'] | default(''))) }}"
      ignore_errors: yes

    - name: Debug CA checksum attempt
      debug:
        msg: "CA Checksum from token: {{ ca_checksum }}"

    - name: Get CA checksum from Rancher server settings if not in token
      uri:
        url: "{{ rancher_url }}/v3/settings/cacerts"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: ca_certs_response
      when: ca_checksum == ''
      ignore_errors: yes

    - name: Calculate CA checksum from CA certificates using shell command
      shell: |
        echo "{{ ca_certs_response.json.value }}" | base64 -d | openssl sha256 -r | cut -d' ' -f1
      register: calculated_checksum
      when: 
        - ca_checksum == ''
        - ca_certs_response is defined and ca_certs_response.json.value is defined
      ignore_errors: yes
      changed_when: false

    - name: Set CA checksum from calculated value
      set_fact:
        ca_checksum: "{{ calculated_checksum.stdout }}"
      when: 
        - ca_checksum == ''
        - calculated_checksum is defined and calculated_checksum.stdout != ''

    - name: Get CA checksum from server's certificate as final fallback
      shell: |
        openssl s_client -connect {{ rancher_url | regex_replace('^https://', '') }}:443 -showcerts </dev/null 2>/dev/null | 
        openssl x509 -outform PEM | 
        openssl sha256 -r | 
        cut -d' ' -f1
      register: openssl_ca_checksum
      when: ca_checksum == ''
      ignore_errors: yes
      changed_when: false

    - name: Set CA checksum from openssl result
      set_fact:
        ca_checksum: "{{ openssl_ca_checksum.stdout }}"
      when: 
        - ca_checksum == ''
        - openssl_ca_checksum is defined and openssl_ca_checksum.stdout != ''

    - name: Final fallback - use empty CA checksum (will use insecure mode)
      set_fact:
        ca_checksum: ""
      when: ca_checksum == ''

    - name: Debug final CA checksum
      debug:
        msg: "Final CA Checksum: {{ ca_checksum }}"

    - name: Build final registration command (conditional CA checksum)
      set_fact:
        registration_cmd: >-
          curl --insecure -fL "{{ rancher_url }}/system-agent-install.sh" | sudo sh -s - 
          --server "{{ rancher_url }}" 
          --label 'cattle.io/os=linux' 
          --token "{{ token }}" 
          {% if ca_checksum and ca_checksum | length == 64 %}--ca-checksum "{{ ca_checksum }}" {% endif %}
          --etcd --controlplane --worker

    - name: Print the final registration command
      debug:
        msg: "{{ registration_cmd }}"

    - name: Create one-line registration command
      set_fact:
        oneline_registration_cmd: "curl --insecure -fL {{ rancher_url }}/system-agent-install.sh | sudo sh -s - --server {{ rancher_url }} --label 'cattle.io/os=linux' --token {{ token }} {% if ca_checksum and ca_checksum | length == 64 %}--ca-checksum {{ ca_checksum }} {% endif %}--etcd --controlplane --worker"

    - name: Print one-line command
      debug:
        msg: "{{ oneline_registration_cmd }}"

    - name: Create registration script file
      copy:
        content: |
          #!/bin/bash
          {{ registration_cmd }}
        dest: "./register-{{ cluster_name }}.sh"
        mode: '0755'

    - name: Display success message
      debug:
        msg: |
          ‚úÖ Registration command generated successfully!
          
          üìÅ Script created: ./register-{{ cluster_name }}.sh
          
          üîë Token: {{ token }}
          üîê CA Checksum: {{ ca_checksum if ca_checksum else 'Not used (insecure mode)' }}
          
          Usage:
          1. Run: ./register-{{ cluster_name }}.sh
          2. Or copy the one-line command above
