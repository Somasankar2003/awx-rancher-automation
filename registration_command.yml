- name: Get complete Rancher cluster registration command
  hosts: localhost
  gather_facts: false
  vars:
    rancher_url: "https://192.168.170.67"
    api_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "custom-cluster"

  tasks:
    - name: Fetch cluster details
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: cluster_list_response

    - name: Fail if cluster not found
      fail:
        msg: "Cluster named {{ cluster_name }} not found!"
      when: cluster_list_response.json.data | length == 0

    - name: Set cluster ID
      set_fact:
        cluster_id: "{{ cluster_list_response.json.data[0].id }}"

    - name: Create new registration token
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens"
        method: POST
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          clusterId: "{{ cluster_id }}"
        validate_certs: false
        status_code: 201
      register: token_response

    - name: Wait for token to be ready with ALL fields
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens/{{ token_response.json.id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
        status_code: 200
      register: final_token
      until: 
        - final_token.json.insecureNodeCommand is defined
        - final_token.json.nodeCommand is defined
        - final_token.json.token is defined
      retries: 20
      delay: 5

    - name: Debug the complete token response
      debug:
        var: final_token.json

    - name: Extract registration commands and token
      set_fact:
        insecure_command: "{{ final_token.json.insecureNodeCommand | trim }}"
        secure_command: "{{ final_token.json.nodeCommand | trim }}"
        generated_token: "{{ final_token.json.token }}"

    - name: Choose the best command (prefer secure, fallback to insecure)
      set_fact:
        base_command: "{{ secure_command if secure_command | length > 0 else insecure_command }}"

    - name: Extract checksum from secure command if available
      set_fact:
        ca_checksum: "{{ secure_command | regex_search('--ca-checksum\\s+(\\S+)', '\\1') | first | default('') }}"
      when: secure_command | length > 0

    - name: Build complete command with correct token and checksum
      set_fact:
        complete_command: "{{ base_command | regex_replace('--token\\s+\\S+', '--token ' + generated_token) }}"
      when: "'--token' in base_command"

    - name: Build complete command by adding token if missing
      set_fact:
        complete_command: "{{ base_command }} --token {{ generated_token }}"
      when: "'--token' not in base_command"

    - name: Ensure roles are included
      set_fact:
        complete_command: "{{ complete_command }} --etcd --controlplane --worker"
      when: "'--etcd' not in complete_command and '--controlplane' not in complete_command and '--worker' not in complete_command"

    - name: Final command cleanup (remove duplicates)
      set_fact:
        complete_command: "{{ complete_command | regex_replace('--etcd\\s+--etcd', '--etcd') | regex_replace('--controlplane\\s+--controlplane', '--controlplane') | regex_replace('--worker\\s+--worker', '--worker') }}"

    - name: Verify the complete command
      debug:
        msg:
          - "Generated Token: {{ generated_token }}"
          - "Command Length: {{ complete_command | length }} characters"
          - "Contains --token: {{ '--token' in complete_command }}"
          - "Token in command: {{ generated_token in complete_command }}"
          - "Contains --etcd: {{ '--etcd' in complete_command }}"
          - "Contains --controlplane: {{ '--controlplane' in complete_command }}"
          - "Contains --worker: {{ '--worker' in complete_command }}"
          - "Contains --ca-checksum: {{ '--ca-checksum' in complete_command }}"

    - name: Create registration script file
      copy:
        content: |
          #!/bin/bash
          # Complete registration script for cluster: {{ cluster_name }}
          # Generated automatically from Rancher API
          
          echo "=========================================="
          echo "Rancher Node Registration Script"
          echo "Cluster: {{ cluster_name }}"
          echo "Cluster ID: {{ cluster_id }}"
          echo "=========================================="
          echo ""
          
          {{ complete_command }}
          
          REGISTRATION_RESULT=$?
          echo ""
          echo "=========================================="
          if [ $REGISTRATION_RESULT -eq 0 ]; then
            echo "‚úÖ Node registration completed successfully!"
            echo "Check Rancher UI for node status"
          else
            echo "‚ùå Node registration failed with exit code: $REGISTRATION_RESULT"
            echo "Please check the output above for errors"
          fi
          echo "=========================================="
        dest: "./register-{{ cluster_name }}.sh"
        mode: '0755'

    - name: Display final results
      debug:
        msg: |
          üéâ COMPLETE REGISTRATION COMMAND GENERATED!
          ==========================================
          
          ‚úÖ TOKEN: {{ generated_token }} (correct from API)
          ‚úÖ CA CHECKSUM: Preserved from original command
          ‚úÖ NODE ROLES: Included (etcd, controlplane, worker)
          
          üìã COMMAND:
          {{ complete_command }}
          
          üìè COMMAND LENGTH: {{ complete_command | length }} characters
          
          üìÅ SCRIPT CREATED: ./register-{{ cluster_name }}.sh
          
          üöÄ USAGE:
          chmod +x register-{{ cluster_name }}.sh
          ./register-{{ cluster_name }}.sh
          
          The command now has the correct token AND correct checksum!
