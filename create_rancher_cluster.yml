- name: Create Rancher Custom Cluster
  hosts: localhost
  gather_facts: false

  vars:
    rancher_url: "https://192.168.170.67"
    api_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "custom-cluster"
    kubernetes_version: "v1.33.1+rke2r1"

  tasks:
    - name: Display raw survey inputs
      debug:
        msg:
          - "Raw node_count: {{ node_count }}"
          - "Raw node_roles: {{ node_roles }}"
          - "Type: {{ node_roles | type_debug }}"

    - name: Fix node_roles format (handle comma-separated string in list)
      set_fact:
        actual_node_roles: "{{ (node_roles | first).split(',') if node_roles is iterable and node_roles | first is string and ',' in node_roles | first else node_roles }}"

    - name: Display corrected values
      debug:
        msg:
          - "Corrected node_roles: {{ actual_node_roles }}"
          - "Type: {{ actual_node_roles | type_debug }}"
          - "Contains etcd: {{ 'etcd' in actual_node_roles }}"
          - "Contains controlplane: {{ 'controlplane' in actual_node_roles }}"
          - "Contains worker: {{ 'worker' in actual_node_roles }}"

    - name: Validate node_roles format
      assert:
        that:
          - actual_node_roles is iterable
          - actual_node_roles | length > 0
          - "'etcd' in actual_node_roles or 'controlplane' in actual_node_roles or 'worker' in actual_node_roles"
        fail_msg: "node_roles must contain valid roles. Current format: {{ node_roles }}"
        success_msg: "node_roles format is correct"

    - name: Validate configuration
      assert:
        that:
          - node_count | int >= 1
          - node_count | int <= 20
          - ("etcd" in actual_node_roles and node_count | int >= 3) or "etcd" not in actual_node_roles
        fail_msg: |
          Invalid configuration:
          - Need minimum 3 nodes if etcd role is selected
          - Current: {{ node_count }} nodes with etcd role
        success_msg: "Configuration validated"

    - name: Create custom cluster in Rancher
      uri:
        url: "{{ rancher_url }}/v1/provisioning.cattle.io.clusters"
        method: POST
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          apiVersion: provisioning.cattle.io/v1
          kind: Cluster
          metadata:
            name: "{{ cluster_name }}"
            namespace: fleet-default
          spec:
            kubernetesVersion: "{{ kubernetes_version }}"
        validate_certs: false
        status_code: 201
      register: create_cluster_response

    - name: Wait for cluster to be ready
      uri:
        url: "{{ rancher_url }}/v1/provisioning.cattle.io.clusters/fleet-default/{{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
        validate_certs: false
        status_code: 200
      register: cluster_status
      until: cluster_status.json.status.clusterName is defined
      retries: 30
      delay: 10

    - name: Get the correct cluster ID from v3 API
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
        validate_certs: false
        status_code: 200
      register: v3_cluster_info

    - name: Extract cluster ID
      set_fact:
        cluster_id: "{{ v3_cluster_info.json.data[0].id }}"
      when: v3_cluster_info.json.data | length > 0

    - name: Create cluster registration token
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens"
        method: POST
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          clusterId: "{{ cluster_id }}"
          type: "clusterRegistrationToken"
        validate_certs: false
        status_code: 201
      register: token_response

    - name: Wait for registration token to be ready
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens/{{ token_response.json.id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
        validate_certs: false
        status_code: 200
      register: final_token
      until: final_token.json.nodeCommand is defined
      retries: 10
      delay: 5

    - name: Display cluster creation results
      debug:
        msg:
          - "âœ… CLUSTER CREATED SUCCESSFULLY!"
          - "Cluster Name: {{ cluster_name }}"
          - "Total Nodes to Register: {{ node_count }}"
          - "Roles for Each Node: {{ actual_node_roles }}"
          - ""
          - "ðŸ“‹ REGISTRATION COMMAND:"
          - "{{ final_token.json.nodeCommand }}"
          - ""
          - "ðŸ”§ MANUAL STEPS:"
          - "1. Run the command on {{ node_count }} nodes"
          - "2. All nodes will have roles: {{ actual_node_roles }}"

    - name: Save registration info to file
      copy:
        content: |
          Cluster Registration Information
          ================================
          Cluster Name: {{ cluster_name }}
          Node Count: {{ node_count }}
          Node Roles: {{ actual_node_roles }}
          
          Registration Command:
          {{ final_token.json.nodeCommand }}
        dest: "/tmp/{{ cluster_name }}-registration.txt"
      delegate_to: localhost
