---
- name: Create VM on OpenStack and auto-register to Rancher
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    # Rancher details
    rancher_url: "https://192.168.170.67"
    rancher_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"  # your Rancher API token
    cluster_name: "openstack-cluster"   # replace with your actual cluster name

    # OpenStack details
    vm_name: "rancher-node-1"
    vm_image: "7e19db1a-48d4-4418-b5e2-d2a5dc611a69"
    vm_flavor: "6a7bab60-adc2-4cff-8db7-6a4f1f866ac2"
    vm_keypair: "rke"
    vm_net: "bce77acb-b609-4205-a00a-6964072d4068"

  tasks:
    - name: Get cluster ID from Rancher
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
        validate_certs: no
      register: cluster_info

    - name: Extract cluster ID
      set_fact:
        cluster_id: "{{ cluster_info.json.data[0].id }}"

    - name: Get registration command from Rancher
      uri:
        url: "{{ rancher_url }}/v3/clusterregistrationtokens?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
        validate_certs: no
      register: reg_info

    - name: Extract registration command and add roles
      set_fact:
        reg_command: "{{ reg_info.json.data[0].nodeCommand | regex_replace('curl -fL', 'curl --insecure -fL') }} --etcd --controlplane --worker"

    - name: Create cloud-init user_data file
      copy:
        dest: ./cloud-init.yml
        content: |
          #cloud-config
          package_update: true
          packages:
            - curl
            - jq
          runcmd:
            - curl -fsSL https://get.docker.com | sh
            - usermod -aG docker ubuntu
            - echo "Running Rancher registration..."
            - curl --insecure -fL https://192.168.170.67/system-agent-install.sh | sudo sh -s - --server https://192.168.170.67 --label 'cattle.io/os=linux' --token 5kz5vjdtfpzjdw54zdc9nkdmzlktrzzfgclbfs7cfp9zxtpmnc4gps --ca-checksum 6084395a78f897c01300c9fa486331eb81316b8271d7c45c64323eab518b51c0 --etcd --controlplane --worker

    - name: Set OpenStack credentials from environment
      set_fact:
        os_auth_url: "http://192.168.150.31:5000/v3"
        os_project_name: "XAS"
        os_project_domain_name: "Default"
        os_username: "admin"
        os_user_domain_name: "Default"
        os_password: "2rlpcV3k3OPv"
        os_interface: "internalURL"
        os_region_name: "RegionOne"  # Region is fine here

    - name: Create VM on OpenStack with cloud-init
      os_server:
        state: present
        name: "{{ vm_name }}"
        image: "{{ vm_image }}"
        flavor: "{{ vm_flavor }}"
        key_name: "{{ vm_keypair }}"
        nics:
          - net-id: "{{ vm_net }}"
        userdata: "{{ lookup('file', './cloud-init.yml') }}"
        auto_ip: yes
        cloud:
          auth:
            auth_url: "{{ os_auth_url }}"
            project_name: "{{ os_project_name }}"
            project_domain_name: "{{ os_project_domain_name }}"
            username: "{{ os_username }}"
            user_domain_name: "{{ os_user_domain_name }}"
            password: "{{ os_password }}"
          region_name: "{{ os_region_name }}"  # Keep region here
      register: new_vm

    - debug:
        msg: "VM {{ vm_name }} created with IP {{ new_vm.server.public_v4 | default(new_vm.server.private_v4) | default('No IP assigned') }}"
