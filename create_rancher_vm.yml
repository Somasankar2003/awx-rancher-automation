---
- name: Create multiple VMs on OpenStack and auto-register to Rancher
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    # Rancher details
    rancher_url: "https://192.168.170.67"
    rancher_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "{{ cluster_name }}"
    # Hardcoded correct checksum from your registration script
    correct_checksum: "6084395a78f897c01300c9fa486331eb81316b8271d7c45c64323eab518b51c0"

    # Surveyed variables from AWX
    vm_count: "{{ vm_count | int }}"
    node_roles: "{{ node_roles }}"
    vm_net: "{{ vm_net }}"
    vm_flavor: "{{ vm_flavor }}"

    # Static VM details
    vm_image: "7e19db1a-48d4-4418-b5e2-d2a5dc611a69"
    vm_keypair: "rke"

    # OpenStack authentication
    os_auth_url: "http://192.168.150.31:5000/v3"
    os_project_name: "XAS"
    os_project_domain: "Default"
    os_username: "admin"
    os_user_domain: "Default"
    os_password: "2rlpcV3k3OPv"
    os_region_name: "RegionOne"

  tasks:

    - name: Validate vm_count is a positive integer
      fail:
        msg: "vm_count must be a positive integer. Got {{ vm_count }}."
      when: vm_count < 1

    - name: Convert comma-separated roles string into a list
      set_fact:
        parsed_roles: "{{ node_roles.split(',') }}"

    - name: Validate node_roles length matches vm_count
      assert:
        that:
          - parsed_roles | length == vm_count
        fail_msg: "node_roles must contain exactly {{ vm_count }} comma-separated roles. Got: {{ parsed_roles | length }}"

    - name: Generate VM list
      set_fact:
        vm_list: "{{ query('sequence', 'start=1 end=' + vm_count|string) }}"

    - name: Combine VM index and role
      set_fact:
        vm_role_map: "{{ vm_list | zip(parsed_roles) | list }}"

    - name: Display VM-to-Role assignment
      debug:
        msg: "VM rancher-node-{{ item.0 }} will be assigned role(s): {{ item.1 }}"
      loop: "{{ vm_role_map }}"

    - name: Get cluster ID from Rancher
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: cluster_info

    - name: Debug cluster info
      debug:
        var: cluster_info.json

    - name: Extract cluster ID
      set_fact:
        cluster_id: "{{ cluster_info.json.data[0].id }}"

    - name: Get registration token from Rancher
      uri:
        url: "{{ rancher_url }}/v3/clusterregistrationtokens?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: reg_info

    - name: Debug registration token info
      debug:
        var: reg_info.json.data[0]

    - name: Extract token from response
      set_fact:
        registration_token: "{{ reg_info.json.data[0].token }}"

    - name: Build proper registration command with CA checksum
      set_fact:
        base_registration_command: "curl --insecure -fL {{ rancher_url }}/system-agent-install.sh | sudo sh -s - --server {{ rancher_url }} --label 'cattle.io/os=linux' --token {{ registration_token }} --ca-checksum {{ correct_checksum }}"

    - name: Debug base registration command
      debug:
        var: base_registration_command

    - name: Create cloud-init files per VM with FIXED registration
      copy:
        dest: "/tmp/cloud-init-rancher-node-{{ item.0 }}.yml"
        content: |
          #cloud-config
          package_update: true
          packages:
            - curl
          runcmd:
            - curl -fsSL https://get.docker.com | sh
            - systemctl enable docker
            - systemctl start docker
            - usermod -aG docker ubuntu
            - sleep 30  # Wait for docker to be fully ready
            - |
              # Build the complete registration command with roles
              {{ base_registration_command }} \
              {% if 'etcd' in item.1 %}--etcd {% endif %}\
              {% if 'controlplane' in item.1 %}--controlplane {% endif %}\
              {% if 'worker' in item.1 %}--worker {% endif %}\
              --node-name rancher-node-{{ item.0 }}
      loop: "{{ vm_role_map }}"
      loop_control:
        label: "rancher-node-{{ item.0 }} - {{ item.1 }}"

    - name: Save registration commands for debugging
      copy:
        content: |
          Registration Commands for {{ cluster_name }}
          ==========================================
          {% for vm in vm_role_map %}
          rancher-node-{{ vm.0 }} ({{ vm.1 }}):
          {{ base_registration_command }} \
          {% if 'etcd' in vm.1 %}--etcd {% endif %}\
          {% if 'controlplane' in vm.1 %}--controlplane {% endif %}\
          {% if 'worker' in vm.1 %}--worker {% endif %}\
          --node-name rancher-node-{{ vm.0 }}

          {% endfor %}
        dest: "/tmp/{{ cluster_name }}-registration-commands.txt"
      delegate_to: localhost

    - name: Create VMs on OpenStack with cloud-init
      os_server:
        state: present
        name: "rancher-node-{{ item.0 }}"
        image: "{{ vm_image }}"
        flavor: "{{ vm_flavor }}"
        key_name: "{{ vm_keypair }}"
        nics:
          - net-id: "{{ vm_net }}"
        userdata: "{{ lookup('file', '/tmp/cloud-init-rancher-node-' + item.0|string + '.yml') }}"
        auto_ip: yes
        timeout: 600
        cloud:
          auth:
            auth_url: "{{ os_auth_url }}"
            project_name: "{{ os_project_name }}"
            project_domain_name: "{{ os_project_domain }}"
            username: "{{ os_username }}"
            user_domain_name: "{{ os_user_domain }}"
            password: "{{ os_password }}"
          region_name: "{{ os_region_name }}"
      register: new_vms
      loop: "{{ vm_role_map }}"
      loop_control:
        label: "rancher-node-{{ item.0 }} - {{ item.1 }}"

    - name: Show created VM details
      debug:
        msg: "‚úÖ VM rancher-node-{{ item.0 }} (role: {{ item.1 }}) created with IP {{ new_vms.results[item.0 | int - 1].server.public_v4 | default(new_vms.results[item.0 | int - 1].server.private_v4) | default('No IP assigned') }}"
      loop: "{{ vm_role_map }}"
      loop_control:
        label: "rancher-node-{{ item.0 }} - {{ item.1 }}"

    - name: Wait for nodes to register in Rancher
      uri:
        url: "{{ rancher_url }}/v3/nodes?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: rancher_nodes
      until: rancher_nodes.json.data | length >= vm_count
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Show registration status
      debug:
        msg: |
          üìä RANCHER REGISTRATION STATUS:
          Expected nodes: {{ vm_count }}
          Registered nodes: {{ rancher_nodes.json.data | length }}
          {% if rancher_nodes.json.data | length >= vm_count %}
          ‚úÖ SUCCESS: All nodes registered successfully!
          {% else %}
          ‚ö†Ô∏è WARNING: Only {{ rancher_nodes.json.data | length }}/{{ vm_count }} nodes registered.
          Nodes may still be provisioning...
          {% endif %}

    - name: Display registered node details
      debug:
        msg: |
          {% for node in rancher_nodes.json.data %}
          Node: {{ node.name }}
          - State: {{ node.state }}
          - Roles: etcd={{ node.etcd }}, controlplane={{ node.controlPlane }}, worker={{ node.worker }}
          {% endfor %}
