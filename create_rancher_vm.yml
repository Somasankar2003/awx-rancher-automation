---
- name: Create multiple VMs on OpenStack and auto-register to Rancher
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    # Rancher details
    rancher_url: "https://192.168.170.67"
    rancher_token: "token-kdlpz:c4pkgsl5pk5rm6rxtz5jr5frjhl9p427b76q2dm7pdnpsbnfwml9qf"
    cluster_name: "{{ cluster_name }}"

    # Surveyed variables from AWX
    vm_count: "{{ vm_count | int }}"
    node_roles: "{{ node_roles }}"
    vm_net: "{{ vm_net }}"
    vm_flavor: "{{ vm_flavor }}"

    # Static VM details
    vm_image: "7e19db1a-48d4-4418-b5e2-d2a5dc611a69"
    vm_keypair: "rke"

    # OpenStack authentication
    os_auth_url: "http://192.168.150.31:5000/v3"
    os_project_name: "XAS"
    os_project_domain: "Default"
    os_username: "admin"
    os_user_domain: "Default"
    os_password: "2rlpcV3k3OPv"
    os_region_name: "RegionOne"

  tasks:

    - name: Validate vm_count is a positive integer
      fail:
        msg: "vm_count must be a positive integer. Got {{ vm_count }}."
      when: vm_count < 1

    - name: Convert comma-separated roles string into a list
      set_fact:
        parsed_roles: "{{ node_roles.split(',') }}"

    - name: Validate node_roles length matches vm_count
      assert:
        that:
          - parsed_roles | length == vm_count
        fail_msg: "node_roles must contain exactly {{ vm_count }} comma-separated roles. Got: {{ parsed_roles | length }}"

    - name: Generate VM list
      set_fact:
        vm_list: "{{ query('sequence', 'start=1 end=' + vm_count|string) }}"

    - name: Combine VM index and role
      set_fact:
        vm_role_map: "{{ vm_list | zip(parsed_roles) | list }}"

    - name: Display VM-to-Role assignment
      debug:
        msg: "VM rancher-node-{{ item.0 }} will be assigned role(s): {{ item.1 }}"
      loop: "{{ vm_role_map }}"

    - name: Get cluster ID from Rancher
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: cluster_info

    - name: Debug cluster info
      debug:
        var: cluster_info.json

    - name: Fail if cluster not found
      fail:
        msg: "Cluster '{{ cluster_name }}' not found in Rancher!"
      when: cluster_info.json.data | length == 0

    - name: Extract cluster ID
      set_fact:
        cluster_id: "{{ cluster_info.json.data[0].id }}"

    - name: Create cluster registration token
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens"
        method: POST
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          clusterId: "{{ cluster_id }}"
        validate_certs: no
        status_code: 201
      register: token_create
      ignore_errors: yes

    - name: Wait for registration token to be ready
      uri:
        url: "{{ rancher_url }}/v3/clusterRegistrationTokens?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: reg_info
      until: >
        reg_info.json.data[0].nodeCommand is defined and 
        reg_info.json.data[0].nodeCommand != ""
      retries: 20
      delay: 5

    - name: Debug registration token details
      debug:
        msg: |
          üîç REGISTRATION TOKEN DETAILS:
          - Cluster: {{ cluster_name }}
          - Cluster ID: {{ cluster_id }}
          - Token: {{ reg_info.json.data[0].token }}
          - Node Command Available: {{ reg_info.json.data[0].nodeCommand is defined }}

    - name: Extract node command and token
      set_fact:
        node_command: "{{ reg_info.json.data[0].nodeCommand }}"
        registration_token: "{{ reg_info.json.data[0].token }}"

    - name: Debug the actual node command
      debug:
        msg: "üìù NODE COMMAND: {{ node_command }}"

    - name: Create cloud-init files with SIMPLIFIED registration
      copy:
        dest: "/tmp/cloud-init-rancher-node-{{ item.0 }}.yml"
        content: |
          #cloud-config
          package_update: true
          packages:
            - curl
            - docker.io
          runcmd:
            - |
              echo "=== Starting Rancher Node Registration ==="
              echo "Node: rancher-node-{{ item.0 }}"
              echo "Role: {{ item.1 }}"
              echo "Cluster: {{ cluster_name }}"
            - systemctl enable docker
            - systemctl start docker
            - usermod -aG docker ubuntu
            - sleep 10
            - |
              echo "=== Installing Rancher System Agent ==="
              # Use the exact node command from Rancher
              {{ node_command }} \
              {% if 'etcd' in item.1 %}--etcd {% endif %}\
              {% if 'controlplane' in item.1 %}--controlplane {% endif %}\
              {% if 'worker' in item.1 %}--worker {% endif %}\
              --node-name rancher-node-{{ item.0 }}
            - |
              echo "=== Registration Command Executed ==="
              echo "Waiting for agent to start..."
              sleep 30
            - |
              echo "=== Checking Rancher System Agent Status ==="
              systemctl status rancher-system-agent || echo "Agent service check failed"
            - |
              echo "=== Checking Docker Containers ==="
              docker ps -a || echo "Docker check failed"
            - |
              echo "=== Registration Process Complete ==="
      loop: "{{ vm_role_map }}"
      loop_control:
        label: "rancher-node-{{ item.0 }} - {{ item.1 }}"

    - name: Save registration commands for manual testing
      copy:
        content: |
          MANUAL REGISTRATION COMMANDS
          ============================
          Cluster: {{ cluster_name }}
          Cluster ID: {{ cluster_id }}
          Token: {{ registration_token }}
          
          Manual Test Commands (run on VMs):
          {% for vm in vm_role_map %}
          
          # rancher-node-{{ vm.0 }} ({{ vm.1 }})
          {{ node_command }} \
          {% if 'etcd' in vm.1 %}--etcd {% endif %}\
          {% if 'controlplane' in vm.1 %}--controlplane {% endif %}\
          {% if 'worker' in vm.1 %}--worker {% endif %}\
          --node-name rancher-node-{{ vm.0 }}
          
          {% endfor %}
        dest: "/tmp/{{ cluster_name }}-manual-commands.txt"
      delegate_to: localhost

    - name: Create VMs on OpenStack with cloud-init
      os_server:
        state: present
        name: "rancher-node-{{ item.0 }}"
        image: "{{ vm_image }}"
        flavor: "{{ vm_flavor }}"
        key_name: "{{ vm_keypair }}"
        nics:
          - net-id: "{{ vm_net }}"
        userdata: "{{ lookup('file', '/tmp/cloud-init-rancher-node-' + item.0|string + '.yml') }}"
        auto_ip: yes
        timeout: 600
        cloud:
          auth:
            auth_url: "{{ os_auth_url }}"
            project_name: "{{ os_project_name }}"
            project_domain_name: "{{ os_project_domain }}"
            username: "{{ os_username }}"
            user_domain_name: "{{ os_user_domain }}"
            password: "{{ os_password }}"
          region_name: "{{ os_region_name }}"
      register: new_vms
      loop: "{{ vm_role_map }}"
      loop_control:
        label: "rancher-node-{{ item.0 }} - {{ item.1 }}"

    - name: Show created VM details with IPs
      debug:
        msg: "‚úÖ VM rancher-node-{{ item.0 }} (role: {{ item.1 }}) - IP: {{ new_vms.results[item.0 | int - 1].server.public_v4 | default(new_vms.results[item.0 | int - 1].server.private_v4) | default('No IP') }}"
      loop: "{{ vm_role_map }}"
      loop_control:
        label: "rancher-node-{{ item.0 }} - {{ item.1 }}"

    - name: Wait a few minutes for VMs to boot
      pause:
        minutes: 3
      delegate_to: localhost

    - name: Check current node registration status
      uri:
        url: "{{ rancher_url }}/v3/nodes?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: current_nodes
      retries: 3
      delay: 5

    - name: Show current registration status
      debug:
        msg: |
          üìä CURRENT REGISTRATION STATUS (after 3 minutes):
          - Expected VMs: {{ vm_count }}
          - Currently Registered: {{ current_nodes.json.data | length }}
          - Registered Nodes: 
          {% for node in current_nodes.json.data %}
            - {{ node.name }} ({{ node.state }})
          {% endfor %}

    - name: Provide troubleshooting steps
      debug:
        msg: |
          üîß TROUBLESHOOTING STEPS:
          
          If nodes are not registering:
          
          1. SSH into a VM and check logs:
             ssh ubuntu@<VM_IP>
             
          2. Check cloud-init logs:
             sudo tail -f /var/log/cloud-init-output.log
             
          3. Check Rancher agent logs:
             sudo journalctl -u rancher-system-agent -f
             
          4. Check Docker containers:
             sudo docker ps -a
             
          5. Manually run registration command from:
             /tmp/{{ cluster_name }}-manual-commands.txt
          
          6. Check VM can reach Rancher URL:
             curl -k {{ rancher_url }}

    - name: Wait for nodes with reduced expectations
      uri:
        url: "{{ rancher_url }}/v3/nodes?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ rancher_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: final_nodes
      until: final_nodes.json.data | length > 0
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Final registration report
      debug:
        msg: |
          üéØ FINAL REGISTRATION REPORT:
          ============================
          Cluster: {{ cluster_name }}
          Expected VMs: {{ vm_count }}
          Registered Nodes: {{ final_nodes.json.data | length }}
          
          {% if final_nodes.json.data | length > 0 %}
          ‚úÖ SUCCESS: Some nodes registered!
          Registered Nodes:
          {% for node in final_nodes.json.data %}
          - {{ node.name }}: {{ node.state }} (etcd:{{ node.etcd }}, cp:{{ node.controlPlane }}, worker:{{ node.worker }})
          {% endfor %}
          {% else %}
          ‚ùå NO NODES REGISTERED
          
          Next steps:
          1. Check VM connectivity to Rancher
          2. Verify registration token is valid
          3. Check cloud-init logs on VMs
          4. Manually run registration commands
          {% endif %}
